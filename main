-- üíæ Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local player = Players.LocalPlayer
local camera = workspace.CurrentCamera
local SoundService = game:GetService("SoundService")
local RunService = game:GetService("RunService")

-- üßç Character Setup
local character = player.Character or player.CharacterAdded:Wait()
local HRP = character:WaitForChild("HumanoidRootPart")
local playerGui = player:WaitForChild("PlayerGui")

-- ========================================
-- üî¥ Rake ESP
-- ========================================
local function createESP(target, name, fillColor)
	if not target:FindFirstChild(name .. "ESP") then
		local highlight = Instance.new("Highlight")
		highlight.Name = name .. "ESP"
		highlight.FillColor = fillColor
		highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
		highlight.FillTransparency = 0.5
		highlight.OutlineTransparency = 0
		highlight.Adornee = target
		highlight.Parent = target
	end
end

local function applyRakeESP()
	local rake = workspace:FindFirstChild("Rake", true)
	if rake then
		createESP(rake, "Rake", Color3.fromRGB(255, 0, 0))
	end
end

workspace.ChildAdded:Connect(function(child)
	if child.Name == "Rake" then
		task.wait(0.1)
		applyRakeESP()
	end
end)

applyRakeESP()

-- ========================================
-- üü° Scrap ESP + Auto Collect
-- ========================================
local collectDistance = 10
local ProximityPromptService = game:GetService("ProximityPromptService")

-- üü® Add glow to Scrap
local function handleScrap(scrap)
	if scrap:IsA("PVInstance") and not scrap:FindFirstChild("ScrapESP") then
		local highlight = Instance.new("Highlight")
		highlight.Name = "ScrapESP"
		highlight.FillColor = Color3.fromRGB(255, 255, 0)
		highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
		highlight.FillTransparency = 0.3
		highlight.OutlineTransparency = 0
		highlight.Adornee = scrap
		highlight.Parent = scrap
	end
end

-- üü® Initial ESP pass
for _, obj in ipairs(workspace:GetDescendants()) do
	if obj.Name == "Scrap" then
		handleScrap(obj)
	end
end

-- üü® Watch for future Scrap
workspace.DescendantAdded:Connect(function(descendant)
	if descendant.Name == "Scrap" then
		task.wait(0.1)
		handleScrap(descendant)
	end
end)

-- üü® Auto-collect nearby Scrap prompts (event-based)
ProximityPromptService.PromptShown:Connect(function(prompt, inputType)
	local parent = prompt.Parent
	if parent and parent.Name == "Scrap" then
		local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
		if hrp and (hrp.Position - parent.Position).Magnitude <= collectDistance then
			task.wait(0.05)
			pcall(function()
				prompt:InputHoldBegin()
				task.wait(0.1)
				prompt:InputHoldEnd()
			end)
		end
	end
end)

-- ========================================
-- üü¢ FlareGun ESP + Notification
-- ========================================
local flareGunESP = {} -- Tracks which flaregun we're watching
local function notify(msg)
	pcall(function()
		game.StarterGui:SetCore("SendNotification", {
			Title = "FlareGun Update",
			Text = msg,
			Duration = 3
		})
	end)
end

local function applyFlareGunESP(flareGun)
	if flareGun:FindFirstChild("FlareGunESP") then return end

	local primaryPart = flareGun:IsA("Model") and (flareGun.PrimaryPart or flareGun:FindFirstChildWhichIsA("BasePart")) or flareGun
	if primaryPart then
		local highlight = Instance.new("Highlight")
		highlight.Name = "FlareGunESP"
		highlight.FillColor = Color3.fromRGB(0, 255, 0)
		highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
		highlight.FillTransparency = 0.3
		highlight.OutlineTransparency = 0
		highlight.Adornee = flareGun
		highlight.Parent = flareGun
	end
end

local function watchFlareGun(flareGun)
	if flareGunESP[flareGun] then return end

	-- Only act if it's in Collectibles when added
	if flareGun.Parent and flareGun.Parent.Name == "Collectibles" then
		flareGunESP[flareGun] = true
		applyFlareGunESP(flareGun)
		notify("‚úÖ FlareGun is available in Collectibles!")

		flareGun.AncestryChanged:Connect(function(_, newParent)
			if not flareGun:IsDescendantOf(workspace) or (newParent and newParent.Name ~= "Collectibles") then
				if flareGunESP[flareGun] then
					notify("‚ùå FlareGun was collected or removed!")
					flareGunESP[flareGun] = nil
				end
			end
		end)
	end
end

-- Listen for new FlareGuns
workspace.DescendantAdded:Connect(function(descendant)
	if descendant.Name == "FlareGun" then
		task.wait(0.1)
		watchFlareGun(descendant)
	end
end)

-- Initial scan
for _, obj in ipairs(workspace:GetDescendants()) do
	if obj.Name == "FlareGun" then
		watchFlareGun(obj)
	end
end
-- ========================================
-- üîÜ Lighting Lock
-- ========================================
local desiredBrightness = 2
local desiredDiffuse = 1
local desiredAtmosphereColor = Color3.fromRGB(107, 107, 107)
local desiredAtmosphereDensity = 0.4

-- Get atmosphere (or wait for it to appear)
local function getAtmosphere()
	local atmosphere = Lighting:FindFirstChildOfClass("Atmosphere")
	if not atmosphere then
		atmosphere = Instance.new("Atmosphere")
		atmosphere.Parent = Lighting
	end
	return atmosphere
end

-- Apply and lock lighting settings
local function lockLightingSettings()
	Lighting.Brightness = desiredBrightness
	Lighting.EnvironmentDiffuseScale = desiredDiffuse

	Lighting:GetPropertyChangedSignal("Brightness"):Connect(function()
		if Lighting.Brightness ~= desiredBrightness then
			Lighting.Brightness = desiredBrightness
		end
	end)

	Lighting:GetPropertyChangedSignal("EnvironmentDiffuseScale"):Connect(function()
		if Lighting.EnvironmentDiffuseScale ~= desiredDiffuse then
			Lighting.EnvironmentDiffuseScale = desiredDiffuse
		end
	end)
end

-- Apply and lock atmosphere settings
local function lockAtmosphereSettings()
	local atmosphere = getAtmosphere()
	atmosphere.Color = desiredAtmosphereColor
	atmosphere.Density = desiredAtmosphereDensity

	atmosphere:GetPropertyChangedSignal("Color"):Connect(function()
		if atmosphere.Color ~= desiredAtmosphereColor then
			atmosphere.Color = desiredAtmosphereColor
		end
	end)

	atmosphere:GetPropertyChangedSignal("Density"):Connect(function()
		if atmosphere.Density ~= desiredAtmosphereDensity then
			atmosphere.Density = desiredAtmosphereDensity
		end
	end)
end

-- üöÄ Start the lock
lockLightingSettings()
lockAtmosphereSettings()

-- ========================================
-- Music mute
-- ========================================

local musicGroup = SoundService:FindFirstChild("Music")

local function lockVolume(sound)
	if sound:IsA("Sound") and sound.Name == "WindOfFjords" then
		sound.Volume = 0

		-- If already connected, skip
		if not sound:FindFirstChild("__Locked") then
			local tag = Instance.new("BoolValue")
			tag.Name = "__Locked"
			tag.Parent = sound

			-- React to volume being changed by other scripts
			sound.Changed:Connect(function(property)
				if property == "Volume" and sound.Volume ~= 0 then
					sound.Volume = 0
				end
			end)
		end
	end
end

-- Lock existing sounds
for _, obj in ipairs(game:GetDescendants()) do
	if obj:IsA("Sound") and obj.Name == "WindOfFjords" then
		lockVolume(obj)
	end
end

-- Lock future sounds
game.DescendantAdded:Connect(function(obj)
	if obj:IsA("Sound") and obj.Name == "WindOfFjords" then
		lockVolume(obj)
	end
end)

-- ========================================
-- Clock GUI
-- ========================================

-- Wait for existing MainGui and HealthBar
local mainGui = playerGui:WaitForChild("MainGui")
local healthBar = mainGui:WaitForChild("HealthBar")

-- Create the clock label (directly in MainGui)
local clockLabel = Instance.new("TextLabel")
clockLabel.Name = "ClockLabel"
clockLabel.AnchorPoint = Vector2.new(0, 1)
clockLabel.Position = UDim2.new(0.46, 0, 1, -90)
clockLabel.Size = UDim2.new(0, 150, 0, 50)
clockLabel.BackgroundTransparency = 0.3
clockLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
clockLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
clockLabel.Font = Enum.Font.SourceSansBold
clockLabel.TextSize = 32
clockLabel.Text = "00:00"
clockLabel.Visible = true -- üîí Hidden until HealthBar is visible
clockLabel.Parent = mainGui

-- Timer value reference
local timerValue = workspace:WaitForChild("Info"):WaitForChild("Timer")

-- Format seconds into MM:SS
local function formatTime(seconds)
	seconds = math.max(0, math.floor(seconds))
	local minutes = math.floor(seconds / 60)
	local secs = seconds % 60
	return string.format("%02d:%02d", minutes, secs)
end

-- Show the clock only when HealthBar is visible
healthBar:GetPropertyChangedSignal("Visible"):Connect(function()
	clockLabel.Visible = healthBar.Visible
end)

-- Update time
RunService.RenderStepped:Connect(function()
	if clockLabel.Visible and timerValue and timerValue:IsA("NumberValue") then
		local time = timerValue.Value
		clockLabel.Text = formatTime(time)
		clockLabel.TextColor3 = time < 10 and Color3.fromRGB(255, 50, 50) or Color3.fromRGB(255, 255, 255)
	end
end)
